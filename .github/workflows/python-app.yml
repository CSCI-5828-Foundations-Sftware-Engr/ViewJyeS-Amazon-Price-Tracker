# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Flask CICD

on:
  push:
    branches: [ "rohit-cicd-change" ]
    
env:
  EB_PACKAGE_S3_BUCKET_NAME : "cicdipelineflaskviewjayes"
  EB_APPLICATION_NAME       : "FlaskAppViewJayes"
  EB_ENVIRONMENT_NAME       : "Flaskappviewjayes-env"
  DEPLOY_PACKAGE_NAME       : "./Frontend/Amazon-Tracker-Frontend/dist/spa"
  AWS_REGION_NAME           : "us-east-1"

jobs:
  
  Test-Local:
      runs-on: ubuntu-latest
      environment:
        name: Development
      strategy:
        matrix:
          python-version: [3.9]

      steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        
#      - name: Test with pytest
#        run: |
#          if [ -d tests ] || [ -d test ]; then FLASK_ENV=${{secrets.FLASK_ENV}} python -m pytest; fi
#      - name: Test application
#        run: |
#          cd ./Backend/Submit-Form/
#          pip install -r requirements.txt
#          flask --app app run -p 5000

  DeployBackend:
    name: DeployBackend
    
    runs-on: ubuntu-latest
    environment:
      name: Development
    needs: [Test-Local]
    steps:

      - name: Deploy
        run: echo "I am deploying the api to AWS"

      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USERNAME  }}
            DB_IP_ADDRESS: ${{ secrets.IP_DB }}
            
        run: |
          chmod 600 /Backend/flask/private_key.pem
          ssh -o StrictHostKeyChecking=no -i /Backend/flask/private_key.pem ${USER_NAME}@${HOSTNAME} '
            cd /home/ubuntu/FSCBackend/ViewJyeS-Amazon-Price-Tracker && echo "killing gunicorn" &&
            sudo kill $(pgrep gunicorn)
          ' && 
          ssh -o StrictHostKeyChecking=no -i /Backend/flask/private_key.pem ${USER_NAME}@${HOSTNAME} '
            cd /home/ubuntu/FSCBackend/ViewJyeS-Amazon-Price-Tracker && echo "changing to FSCBackend" &&
            git pull && echo "running new command" &&
            gunicorn app:app -b 0.0.0.0:5000 --daemon
          '
  
  DeployFrontend:

    runs-on: ubuntu-latest
    needs: [Test-Local]
    steps:
    - name: Git Clone repository
      uses: actions/checkout@v3

    - name: Goto Frontend folder and build
      run: cd ./Frontend/Amazon-Tracker-Frontend && echo "running Update" &&
           sudo apt-get update && echo "running install npm latest" &&
           node -v && echo "node version" &&
           npm -v && echo "npm version" &&
           npm i -g @quasar/cli &&
           npm install && echo "running npm install quasar" &&
           quasar -v && echo "after npm and bulding quazar " &&
           quasar build && echo "done with build" 

    - name: Configuring my AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id  : ${{ secrets.MY_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
        aws-region           : ${{ env.AWS_REGION_NAME }}        

    - name: Copy out Deployment package to S3 bucket
      run: aws s3 cp Frontend/Amazon-Tracker-Frontend/dist/spa s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }} --recursive
      
    - name: Print message of CI completion
      run: echo "CI Pipeline  is completed successfully"
          
        
